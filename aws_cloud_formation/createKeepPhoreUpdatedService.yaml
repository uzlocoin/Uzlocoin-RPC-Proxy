AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a KeepUzlocoinUpdated service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: UzlocoinRPC
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: KeepUzlocoinUpdated
    Description: Keep block database updated on S3 storage
  ImageUrl:
    Type: String
    Default: 703473045561.dkr.ecr.us-east-1.amazonaws.com/keep_uzlocoin_updated:latest
    Description: keep uzlocoin updated image
  ContainerHTTPPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "/KeepUzlocoinUpdated/*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 32
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.

# This section will group and rename parameters for user.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: 'Basic Configuration'
      Parameters:
      - StackName
      - ServiceName
      - ImageUrl
    -
      Label:
        default: 'Network Configuration'
      Parameters:
      - ContainerHTTPPort
      - Path
    -
      Label:
        default: 'Task Configuration'
      Parameters:
      - ContainerCpu
      - ContainerMemory
    ParameterLabels:
      StackName:
        default: 'Name of basic stack (vpc, load balancers etc)'
      ServiceName:
        default: 'Service name'
      ImageUrl:
        default: 'ECR Docker image'
      ContainerHTTPPort:
        default: 'HTTP port'
      Path:
        default: 'Serve service on url'
      ContainerCpu:
        default: 'Container CPU in AWS terms'
      ContainerMemory:
        default: 'Container memory in MB'

Resources:
  # The log driver group definition for service.
  LogDriver:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ['/', ['/rpc', !Ref 'ServiceName']]
      RetentionInDays: 30

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskS3AccessRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerHTTPPort'
          Environment:
            - Name: 'AWS_DEFAULT_REGION'
              Value : !Ref 'AWS::Region'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['/', ['/rpc', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'rpc'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerHTTPRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      HealthCheckGracePeriodSeconds: 30
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1 # this service is internal one and needs only 1 instance
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerHTTPPort'
          TargetGroupArn: !Ref 'TargetHTTPGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetHTTPGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Name: !Join ['-', [!Ref 'ServiceName', !Ref 'ContainerHTTPPort']]
      Port: !Ref 'ContainerHTTPPort'
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerHTTPRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetHTTPGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicHTTPListener']]
      Priority: !Ref 'Priority'
